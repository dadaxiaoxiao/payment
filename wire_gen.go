// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/dadaxiaoxiao/go-pkg/customserver"
	"github.com/dadaxiaoxiao/payment/internal/grpc"
	"github.com/dadaxiaoxiao/payment/internal/repository"
	"github.com/dadaxiaoxiao/payment/internal/repository/dao"
	"github.com/dadaxiaoxiao/payment/internal/web"
	"github.com/dadaxiaoxiao/payment/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitApp() *customserver.App {
	client := ioc.InitEtcdClient()
	wechatConfig := ioc.InitWechatConfig()
	coreClient := ioc.InitWechatClient(wechatConfig)
	db := ioc.InitDB()
	paymentDao := dao.NewPaymentGORMDAO(db)
	paymentRepository := repository.NewPaymentRepository(paymentDao)
	logger := ioc.InitLogger()
	saramaClient := ioc.InitKafka()
	producer := ioc.InitProducer(saramaClient)
	nativePaymentService := ioc.InitWechatNativePaymentSvc(coreClient, paymentRepository, logger, wechatConfig, producer)
	wechatServiceServer := grpc.NewWechatServiceServer(nativePaymentService)
	cmdable := ioc.InitRedis()
	server := ioc.InitGRPCServer(client, wechatServiceServer, cmdable, logger)
	handler := ioc.InitWechatNotifyHandler(wechatConfig)
	wechatHandler := web.NewWechatHandler(handler, nativePaymentService, logger)
	ginxServer := ioc.InitGinServer(wechatHandler)
	cronJobBuilder := ioc.InitCronJobBuilder(logger)
	v := ioc.InitJobs(logger, cronJobBuilder, nativePaymentService)
	app := &customserver.App{
		GRPCServer: server,
		GinServer:  ginxServer,
		Crons:      v,
	}
	return app
}

// wire.go:

var thirdPartyProvider = wire.NewSet(ioc.InitRedis, ioc.InitLogger, ioc.InitDB, ioc.InitKafka, ioc.InitProducer, ioc.InitEtcdClient)

var jobProvider = wire.NewSet(ioc.InitCronJobBuilder, ioc.InitJobs)
